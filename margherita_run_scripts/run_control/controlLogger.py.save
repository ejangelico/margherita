#!/opt/rh/python27/root/usr/bin/python
import time
import os
import stat
import sys
import subprocess
import numpy as np
import serial
import re
import OmegaBox
from controlOffsets import tcOffsets


#sets the zone parameters for each zone in the controller set
def sendAllZoneParameters(setfile, omegabox):
	lineStructure = np.genfromtxt(setfile, delimiter=',', dtype=str)

	#check to make sure that all lines in the setfile have
	#the right number of comma delimited numbers
	sum = 0
	for l in lineStructure:
		sum += len(l)
	
	#each line should have 3 numbers
	#so the sum mod 3 should be 0
	if(sum % 3 != 0):
		print "Please correct your setfile. The format is: "
		print "<zone number (int)>,<zone enable (bool int)>,<setpoint (int)>"
		print "no spaces please"
		sys.exit()


	#if all is well, lets coordinate the data and send it
	enables = [_[1] for _ in lineStructure]
	setpoints = [_[2] for _ in lineStructure]

	#this line adjusts the setpoints to properly
	#account for the TC offsets
	setpoints = [str(int(setpoints[i]) - int(tcOffsets[i])) for i in range(len(setpoints))]

	
	#send the data
	omegabox.writeEnabledZones(enables)
	omegabox.writeAllSetPoints(setpoints)

	return


def logTemperatures(templogfile, omegabox):
	outfile = open(templogfile,'a')
	print "deciding to log temps"
	output = omegabox.readAllTemps()

	#if zones are disabled, the omega
	#returns no value for the thermocouple. 
	#if a zone is disabled, just make that thermocouple
	#room temperature.
	for i in range(len(output)):
	    if(output[i] == '' or output[i] == '9999'):
		output[i] = 20
	
	
	#adjust the logged temperature given 
	#a set of calibration offsets from the 
	#file "controlOffsets"

	#incorrect number of offsets in the file
	if(len(tcOffsets) != len(output)):
	    print "controlOffsets.txt has the wrong number of TC's"
	    calibratedOutput = output #just use the uncalibrated data
	else:
	    calibratedOutput = [str(int(output[i]) + int(tcOffsets[i])) for i in range(len(output))]

	print ' '.join(calibratedOutput)
	outfile.write(','.join(calibratedOutput) + ',' + time.strftime("%m-%d-%y %H:%M:%S") + "\n")
	outfile.close()
	print "Logged temps..."



def saveSetfileSnapshot(snapshotfile, setfile):
	try:
		outfile = open(snapshotfile, "a")
	except IOError:
		print "Could not open snapshot file"
		return
	print "opened snapshot file, deciding to write snapshot..."
	outfile.write("********" + time.strftime("%m-%d-%y %H:%M:%S") + "*********")

	sf = open(setfile, 'r')
	lines = sf.readlines()
	for l in lines:
		outfile.write(l)

	outfile.close()
	print "wrote snapshot and closed file"

	


if __name__ == '__main__':

	setfile = "/home/pi/pi42_5-26-2017/controlLogger/setpoints.txt"		#file to look in for setpoint configurations
	snapshotfile = "/home/pi/pi42_5-26-2017/controlLogger/snapshots.txt" 	#file to save each change in the setpoint configuration
	templogfile = "/home/pi/pi42_5-26-2017/data/control_data/controlLog%s.txt" % time.strftime('%y%m%d') #file to log control TC's into


	#create an object representing the omega box
	omegabox = OmegaBox.OmegaBox('/dev/ttyUSB0')
	waitTime = 1	#time in between data logging 	

	#get the initial timestamp for file modification on the setfile
	(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(setfile)
	lastmod =  mtime


	#load the setfile for the first time
	#set all zone parameters for the first time
	sendAllZoneParameters(setfile, omegabox)

	#save a snapshot of the first configurations
	saveSetfileSnapshot(snapshotfile, setfile)

	
	#start logging and watching
	while True:
		#check if the setfile has been modified
		(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(setfile)
		if (lastmod != mtime):
			sendAllZoneParameters(setfile, omegabox)
			saveSetfileSnapshot(snapshotfile, setfile)
			lastmod = mtime
			time.sleep(waitTime)

		#rename templogfile based on the date
		templogfile = "/home/pi/pi42_5-26-2017/data/control_data/controlLog%s.txt" % time.strftime('%y%m%d') #file to log control TC's into
		
		logTemperatures(templogfile, omegabox)
		time.sleep(waitTime)

	


	
